---
  NeutronNetworks.create_and_delete_floating_ips:
    -
      args:
        floating_network: "{{neutron_floating_network}}"
        floating_ip_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV1.create_and_delete_healthmonitors:
    -
      args:
        healthmonitor_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_networks:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV1.create_and_delete_pools:
    -
      args:
        pool_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: {{neutron_ports_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
        router_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronSecurityGroup.create_and_delete_security_groups:
    -
      args:
        security_group_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV1.create_and_delete_vips:
    -
      args:
        vip_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
        lbaas:
          pool: {}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_floating_ips:
    -
      args:
        floating_network: "{{neutron_floating_network}}"
        floating_ip_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV1.create_and_list_healthmonitors:
    -
      args:
        healthmonitor_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV2.create_and_list_loadbalancers:
    -
      args:
        lb_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NeutronNetworks.create_and_list_networks:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}
    -
      args:
        network_create_args:
          provider:network_type: "{{network_provider_type}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}
        roles:
          - "admin"
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NeutronLoadbalancerV1.create_and_list_pools:
    -
      args:
        pool_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: {{neutron_ports_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
        router_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronSecurityGroup.create_and_list_security_groups:
    -
      args:
        security_group_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV1.create_and_list_vips:
    -
      args:
        vip_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_show_network:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NeutronLoadbalancerV1.create_and_update_healthmonitors:
    -
      args:
        healthmonitor_create_args: {}
        healthmonitor_update_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_update_networks:
    -
      args:
        network_create_args: {}
        network_update_args:
            admin_state_up: False
            name: "_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV1.create_and_update_pools:
    -
      args:
        pool_create_args: {}
        pool_update_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_update_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: {{neutron_ports_per_network}}
        port_update_args:
            admin_state_up: False
            device_id: "dummy_id"
            device_owner: "dummy_owner"
            name: "_port_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_update_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
        router_create_args: {}
        router_update_args:
            admin_state_up: False
            name: "_router_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronSecurityGroup.create_and_update_security_groups:
    -
      args:
        security_group_create_args: {}
        security_group_update_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_update_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.4.0.0/16"
        subnets_per_network: {{neutron_subnets_per_network}}
        subnet_update_args:
            enable_dhcp: False
            name: "_subnet_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronLoadbalancerV1.create_and_update_vips:
    -
      args:
        vip_create_args: {}
        vip_update_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.list_agents:
    -
      args:
        agent_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


