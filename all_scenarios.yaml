---
  Authenticate.keystone:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  Authenticate.validate_cinder:
    -
      args:
        repetitions: {{number_of_times_to_validate}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  Authenticate.validate_glance:
    -
      args:
        repetitions: {{number_of_times_to_validate}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  Authenticate.validate_heat:
    -
      args:
        repetitions: {{number_of_times_to_validate}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  Authenticate.validate_neutron:
    -
      args:
        repetitions: {{number_of_times_to_validate}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  Authenticate.validate_nova:
    -
      args:
        repetitions: {{number_of_times_to_validate}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}




  CinderVolumes.create_and_accept_transfer:
    -
      args:
        size: {{cinder_volume_size}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  CinderVolumes.create_and_attach_volume:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        create_volume_params:
            availability_zone: "{{availability_zone}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  CinderVolumes.create_and_delete_snapshot:
    -
      args:
          force: {{cinder_allow_snapshot}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        volumes:
          size: {{cinder_volume_size_before_benchmarking}}


  CinderVolumeTypes.create_and_delete_volume_type:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  CinderVolumes.create_and_delete_volume:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  CinderVolumes.create_and_extend_volume:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
        new_size:
          min: {{cinder_volume_min_extend_size}}
          max: {{cinder_volume_max_extend_size}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  CinderVolumes.create_and_get_volume:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  CinderVolumeTypes.create_and_list_encryption_type:
    -
      args:
        specs:
          provider: "LuksEncryptor"
          cipher: "aes-xts-plain64"
          key_size: 512
          control_location: "front-end"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  CinderVolumes.create_and_list_snapshots:
    -
      args:
        force: {{cinder_allow_snapshot}}
        detailed: {{cinder_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        volumes:
          size: {{cinder_volume_size_before_benchmarking}}


  CinderVolumes.create_and_list_volume_backups:
    -
      args:
        size: {{cinder_volume_size}}
        detailed: {{cinder_detailed_info}}
        do_delete: {{do_delete}}
        create_volume_kwargs: {}
        create_backup_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "Member"


  CinderVolumes.create_and_list_volume:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
        detailed: {{cinder_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  CinderVolumes.create_and_restore_volume_backup:
    -
      args:
        size: {{cinder_volume_size}}
        do_delete: {{do_delete}}
        create_volume_kwargs: {}
        create_backup_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "Member"

  CinderVolumes.create_volume_and_update_readonly_flag:
    -
      args:
        size: {{cinder_volume_size}}
        read_only: {{cinder_read_only_volume}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  CinderVolumes.create_and_update_volume:
    -
      args:
        update_volume_kwargs:
           display_name: "name_updated"
           display_description: "desc_updated"
        create_volume_kwargs: {}
        size: {{cinder_volume_size}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}



  CinderVolumes.create_and_upload_volume_to_image:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
        force: {{cinder_allow_upload}}
        container_format: "bare"
        disk_format: "raw"
        do_delete: {{do_delete}}
        image:
          name: "{{image_name}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


#  CinderVolumeTypes.create_volume_type_and_encryption_type:
#    -
#      args:
#        specs:
#          provider: "LuksEncryptor"
#          cipher: "aes-xts-plain64"
#          key_size: 512
#          control_location: "front-end"
#      runner:
#        type: "constant"
#        times: {{run_N_times}}
#        concurrency: {{number_of_concurrent_scenarios}}
#      context:
#        users:
#          tenants: {{number_of_tenants}}
#          users_per_tenant: {{users_per_tenant}}
#      sla:
#        failure_rate:
#          max: {{sla_failure_rate_max}}


  CinderVolumes.create_from_volume_and_delete_volume:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        volumes:
          size: {{cinder_volume_size_before_benchmarking}}

  CinderVolumeBackups.create_incremental_volume_backup:
    -
      args:
        size: {{cinder_volume_size}}
        create_volume_kwargs: {}
        create_backup_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "admin"
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}



  CinderVolumes.create_nested_snapshots_and_attach_volume:
    -
      args:
          size:
              min: {{cinder_volume_min_size}}
              max: {{cinder_volume_max_size}}
          nested_level: {{cinder_nested_cloning_level}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        servers:
          image:
            name: "{{image_name}}"
          flavor:
            name: "{{flavor_name}}"
          servers_per_tenant: {{servers_per_tenant_before_benchmarking}}


  CinderVolumes.create_snapshot_and_attach_volume:
    -
      args:
          volume_type: {{cinder_name_volume_type}}
          size:
              min: {{cinder_volume_min_size}}
              max: {{cinder_volume_max_size}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        servers:
          image:
            name: "{{image_name}}"
          flavor:
            name: "{{flavor_name}}"
          servers_per_tenant: {{servers_per_tenant_before_benchmarking}}



  CinderVolumes.create_volume_and_clone:
    -
      args:
        size:
          min: {{cinder_volume_min_size}}
          max: {{cinder_volume_max_size}}
        nested_level: {{cinder_nested_cloning_level}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  CinderVolumes.create_volume_backup:
    -
      args:
        size: {{cinder_volume_size}}
        do_delete: {{do_delete}}
        create_volume_kwargs: {}
        create_backup_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "Member"


  CinderVolumes.create_volume_from_snapshot:
    -
      args:
          do_delete: {{do_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        volumes:
          size: {{cinder_volume_size_before_benchmarking}}


#  CinderVolumes.create_volume:
#    -
#      args:
#        size:
#          min: {{cinder_volume_min_size}}
#          max: {{cinder_volume_max_size}}
#      runner:
#        type: "constant"
#        times: {{run_N_times}}
#        concurrency: {{number_of_concurrent_scenarios}}
#      context:
#        users:
#          tenants: {{number_of_tenants}}
#          users_per_tenant: {{users_per_tenant}}

  CinderVolumes.create_volume_and_update_readonly_flag:
    -
      args:
        size: {{cinder_volume_size}}
        read_only: {{cinder_read_only_volume}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}

  CinderVolumes.list_transfers:
    -
      args:
        detailed: {{cinder_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  CinderVolumes.list_types:
    -
      args:
        is_public: true
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


#  CinderVolumes.list_volumes:
#    -
#      args:
#        detailed: {{cinder_detailed_info}}
#      runner:
#        type: "constant"
#        times: {{run_N_times}}
#        concurrency: {{number_of_concurrent_scenarios}}
#      context:
#        users:
#          tenants: {{number_of_tenants}}
#          users_per_tenant: {{users_per_tenant}}
#        volumes:
#          size: {{cinder_volume_size_before_benchmarking}}
#          volumes_per_tenant: {{cinder_volumes_per_tenant}}


  CinderVolumes.modify_volume_metadata:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        volumes:
          size: {{cinder_volume_size_before_benchmarking}}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}




  GlanceImages.create_and_delete_image:
    -
      args:
        image_location: {{glance_image_location}}
        container_format: "bare"
        disk_format: "qcow2"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  GlanceImages.create_and_list_image:
    -
      args:
        image_location: {{glance_image_location}}
        container_format: "bare"
        disk_format: "qcow2"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  GlanceImages.create_image_and_boot_instances:
    -
      args:
        image_location: {{glance_image_location}}
        container_format: "bare"
        disk_format: "qcow2"
        flavor:
            name: "{{flavor_name}}"
        number_instances: {{glance_number_nova_servers_to_boot}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  GlanceImages.list_images:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        images:
          image_url: {{glance_image_location}}
          image_type: "qcow2"
          image_container: "bare"
          images_per_tenant: {{glance_images_per_tenant_before_benchmarking}}




  HeatStacks.create_and_delete_stack:
   # create-and-delete-stack-with-delay
    -
      args:
        template_path: "heat/templates/resource-group-with-constraint.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  # create-and-delete-stack-with-neutron
    -
      args:
        template_path: "heat/templates/server-with-ports.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  # create-and-delete-stack-with-volume
    -
      args:
        template_path: "heat/templates/server-with-volume.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  # create-and-delete-stack-resource-group
    -
      args:
        template_path: "heat/templates/resource-group-server-with-volume.yaml.template"
        parameters:
           num_instances: {{num_instances_in_stack}}
        files: ["heat/templates/server-with-volume.yaml.template"]
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.create_check_delete_stack:
    -
      args:
        template_path: "heat/templates/random-strings.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  HeatStacks.create_snapshot_restore_delete_stack:
    -
      args:
        template_path: "heat/templates/random-strings.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.create_stack_and_list_output:
    -
      args:
        template_path: "heat/templates/resource-group-with-outputs.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.create_stack_and_list_output_via_API:
    -
      args:
        template_path: "heat/templates/resource-group-with-outputs.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.create_stack_and_scale:
    -
      args:
        template_path: "heat/templates/autoscaling-group.yaml.template"
        output_key: "scaling_url"
        delta: {{stack_change_by_delta}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  HeatStacks.create_stack_and_show_output:
    -
      args:
        template_path: "heat/templates/resource-group-with-outputs.yaml.template"
        output_key: "val1"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.create_stack_and_show_output_via_API:
    -
      args:
        template_path: "heat/templates/resource-group-with-outputs.yaml.template"
        output_key: "val1"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.create_suspend_resume_delete_stack:
    -
      args:
        template_path: "heat/templates/random-strings.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.create_update_delete_stack:
  # create-update-delete-stack-del-res
    -
      args:
        template_path: "heat/templates/random-strings.yaml.template"
        updated_template_path: "heat/templates/updated-random-strings-delete.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  # create-update-delete-stack-increase
    -
      args:
        template_path: "heat/templates/resource-group.yaml.template"
        updated_template_path: "heat/templates/updated-resource-group-increase.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  # create-update-delete-stack-inplace
    -
      args:
        template_path: "heat/templates/autoscaling-policy.yaml.template"
        updated_template_path: "heat/templates/updated-autoscaling-policy-inplace.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  # create-update-delete-stack-reduce
    -
      args:
        template_path: "heat/templates/resource-group.yaml.template"
        updated_template_path: "heat/templates/updated-resource-group-reduce.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  # create-update-delete-stack-replace
    -
      args:
        template_path: "heat/templates/random-strings.yaml.template"
        updated_template_path: "heat/templates/updated-random-strings-replace.yaml.template"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  HeatStacks.list_stacks_and_events:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        stacks:
          stacks_per_tenant: {{stacks_per_tenant_before_benchmarking}}
          resources_per_stack: {{resources_per_stack_before_benchmarking}}


  HeatStacks.list_stacks_and_resources:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        stacks:
          stacks_per_tenant: {{stacks_per_tenant_before_benchmarking}}
          resources_per_stack: {{resources_per_stack_before_benchmarking}}



  KeystoneBasic.add_and_remove_user_role:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  KeystoneBasic.authenticate_user_and_validate_token:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  KeystoneBasic.create_add_and_list_user_roles:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  KeystoneBasic.create_and_delete_ec2credential:

    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  KeystoneBasic.create_and_delete_role:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_and_delete_service:
    -
      args:
        service_type: "Rally_test_type"
        description: "test_description"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}

  KeystoneBasic.create_delete_user:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_and_get_role:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  KeystoneBasic.create_and_list_ec2credentials:

    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  KeystoneBasic.create_and_list_roles:
    -
      args:
        create_role_kwargs: {}
        list_role_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  KeystoneBasic.create_and_list_services:
    -
      args:
        service_type: "Rally_test_type"
        description: "test_description"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_and_list_tenants:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_and_list_users:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_tenant_with_users:
    -
      args:
        users_per_tenant: {{users_per_tenant}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


#  KeystoneBasic.create_tenant:
#    -
#      args: {}
#      runner:
#        type: "constant"
#        times: {{run_N_times}}
#        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_update_and_delete_tenant:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_user_set_enabled_and_delete:
    -
      args:
        enabled: true
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
    -
      args:
        enabled: false
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.create_user_update_password:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


#  KeystoneBasic.create_user:
#    -
#      args: {}
#      runner:
#        type: "constant"
#        times: {{run_N_times}}
#        concurrency: {{number_of_concurrent_scenarios}}


  KeystoneBasic.get_entities:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}




  NeutronNetworks.create_and_delete_floating_ips:
    -
      args:
        floating_network: "{{neutron_floating_network}}"
        floating_ip_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_networks:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: {{neutron_ports_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
        router_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronSecurityGroup.create_and_delete_security_groups:
    -
      args:
        security_group_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_delete_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_floating_ips:
    -
      args:
        floating_network: "{{neutron_floating_network}}"
        floating_ip_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_networks:
    -
      args:
        network_create_args:
          provider:network_type: "{{network_provider_type}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}
        roles:
          - "admin"
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NeutronNetworks.create_and_list_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: {{neutron_ports_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
        router_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronSecurityGroup.create_and_list_security_groups:
    -
      args:
        security_group_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_list_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_show_network:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NeutronNetworks.create_and_update_networks:
    -
      args:
        network_create_args: {}
        network_update_args:
            admin_state_up: False
            name: "_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_update_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: {{neutron_ports_per_network}}
        port_update_args:
            admin_state_up: False
            device_id: "dummy_id"
            device_owner: "dummy_owner"
            name: "_port_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_update_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: {{neutron_subnets_per_network}}
        router_create_args: {}
        router_update_args:
            admin_state_up: False
            name: "_router_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronSecurityGroup.create_and_update_security_groups:
    -
      args:
        security_group_create_args: {}
        security_group_update_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.create_and_update_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.4.0.0/16"
        subnets_per_network: {{neutron_subnets_per_network}}
        subnet_update_args:
            enable_dhcp: False
            name: "_subnet_updated"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        network: {}
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        quotas:
          neutron: {{neutron_quotas_params}}


  NeutronNetworks.list_agents:
    -
      args:
        agent_args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}




  NovaServers.boot_and_associate_floating_ip:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}


  NovaServers.boot_and_delete_multiple_servers:
    -
      args:
        image:
          name: "{{image_name}}"
        flavor:
          name: "{{flavor_name}}"
        count: {{nova_number_of_instances_to_boot}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaKeypair.boot_and_delete_server_with_keypair:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        boot_server_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network:
          start_cidr: "100.1.0.0/26"


  NovaSecGroup.boot_and_delete_server_with_secgroups:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        security_group_count: {{nova_security_group_count}}
        rules_per_security_group: {{nova_rules_per_security_group}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network:
          start_cidr: "100.1.0.0/26"


  NovaServers.boot_and_delete_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        auto_assign_nic: true
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network:
          start_cidr: "10.2.0.0/24"
          networks_per_tenant: {{nova_networks_per_tenant}}


  NovaServers.boot_and_get_console_output:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_and_list_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}



  NovaServers.boot_and_live_migrate_server:
  - args:
      flavor:
        name: "{{flavor_name}}"
      image:
        name: "{{image_name}}"
      block_migration: {{block_migration}}
    runner:
      type: "constant"
      times: {{run_N_times}}
      concurrency: {{number_of_concurrent_scenarios}}
    context:
      users:
        tenants: {{number_of_tenants}}
        users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_and_migrate_server:
  - args:
      flavor:
        name: "{{flavor_name}}"
      image:
        name: "{{image_name}}"
    runner:
      type: "constant"
      times: {{run_N_times}}
      concurrency: {{number_of_concurrent_scenarios}}
    context:
      users:
        tenants: {{number_of_tenants}}
        users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_and_rebuild_server:
  - args:
      flavor:
        name: "{{flavor_name}}"
      from_image:
        name: "{{image_name}}"
      to_image:
        name: "{{nova_rebuild_to_image_name}}"
    runner:
      type: "constant"
      times: {{run_N_times}}
      concurrency: {{number_of_concurrent_scenarios}}
    context:
      users:
        tenants: {{number_of_tenants}}
        users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_and_show_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_and_update_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_and_bounce_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        force_delete: {{force_delete}}
        actions:
          -
            hard_reboot: 1
          -
            soft_reboot: 1
          -
            stop_start: 1
          -
            rescue_unrescue: 1
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_server_from_volume_and_delete:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        volume_size: {{cinder_volume_size}}
        volume_type: "{{volume_type}}"
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_server_from_volume_and_resize:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        to_flavor:
            name: "{{nova_rebuild_to_flavor_name}}"
        confirm: {{nova_confirm_resize}}
        volume_size: {{cinder_volume_size}}
        force_delete: {{force_delete}}
        do_delete: {{do_delete}}
        boot_server_kwargs: {}
        create_volume_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_server_from_volume_snapshot:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        volume_size: {{cinder_volume_size}}
        volume_type: "{{volume_type}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_server_from_volume:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        volume_size: {{cinder_volume_size}}
        volume_type: "{{volume_type}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_lock_unlock_and_delete:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaSecGroup.boot_server_and_add_secgroups:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        security_group_count: {{nova_security_group_count}}
        rules_per_security_group: {{nova_rules_per_security_group}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network:
          start_cidr: "100.1.0.0/26"
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaServers.boot_server_associate_and_dissociate_floating_ip:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        network: {}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}



  NovaServers.boot_server_attach_created_volume_and_live_migrate:
  - args:
      flavor:
        name: "{{flavor_name}}"
      image:
        name: "{{image_name}}"
      size: {{cinder_volume_size}}
      block_migration: {{block_migration}}
      boot_server_kwargs: {}
      create_volume_kwargs: {}
    runner:
      type: "constant"
      times: {{run_N_times}}
      concurrency: {{number_of_concurrent_scenarios}}
    context:
      users:
        tenants: {{number_of_tenants}}
        users_per_tenant: {{users_per_tenant}}


  NovaServers.boot_server_attach_created_volume_and_resize:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        to_flavor:
            name: "{{nova_rebuild_to_flavor_name}}"
        confirm: true
        volume_size: {{cinder_volume_size}}
        force_delete: {{force_delete}}
        do_delete: {{do_delete}}
        boot_server_kwargs: {}
        create_volume_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}

  NovaServers.boot_server_from_volume_and_live_migrate:
  - args:
      flavor:
        name: "{{flavor_name}}"
      image:
        name: "{{image_name}}"
      block_migration: {{block_migration}}
      volume_size: {{cinder_volume_size}}
      volume_type: "{{volume_type}}"
      force_delete: {{force_delete}}
    runner:
      type: "constant"
      times: {{run_N_times}}
      concurrency: {{number_of_concurrent_scenarios}}
    context:
      users:
        tenants: {{number_of_tenants}}
        users_per_tenant: {{users_per_tenant}}


  NovaServers.snapshot_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


#  NovaServers.boot_server:
#    -
#      args:
#        flavor:
#            name: "{{flavor_name}}"
#        image:
#            name: "{{image_name}}"
#      runner:
#        type: "constant"
#        times: {{run_N_times}}
#        concurrency: {{number_of_concurrent_scenarios}}
#      context:
#        users:
#          tenants: {{number_of_tenants}}
#          users_per_tenant: {{users_per_tenant}}


  NovaAggregates.create_aggregate_add_and_remove_host:
    -
      args:
        availability_zone: "{{availability_zone}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaAggregates.create_aggregate_add_host_and_boot_server:
    -
      args:
        image:
          name: "{{image_name}}"
        metadata:
          test_metadata: "true"
        availability_zone: "{{availability_zone}}"
        ram: {{flavor_specification['ram']}}
        vcpus: {{flavor_specification['vcpus']}}
        disk: {{flavor_specification['disk']}}
        boot_server_kwargs: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaAggregates.create_and_delete_aggregate:
    -
      args:
        availability_zone: "{{availability_zone}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaFlavors.create_and_delete_flavor:
    -
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}
      args:
        ram: {{flavor_specification['ram']}}
        vcpus: {{flavor_specification['vcpus']}}
        disk: {{flavor_specification['disk']}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaKeypair.create_and_delete_keypair:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaSecGroup.create_and_delete_secgroups:
    -
      args:
        security_group_count: {{nova_security_group_count}}
        rules_per_security_group: {{nova_rules_per_security_group}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaAggregates.create_and_get_aggregate_details:
    -
      args:
        availability_zone: "{{availability_zone}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}



  NovaFlavors.create_and_get_flavor:
    -
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}
      args:
        ram: {{flavor_specification['ram']}}
        vcpus: {{flavor_specification['vcpus']}}
        disk: {{flavor_specification['disk']}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaAggregates.create_and_list_aggregates:
    -
      args:
        availability_zone: "{{availability_zone}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaFlavors.create_and_list_flavor_access:
    -
      args:
        ram: {{flavor_specification['ram']}}
        vcpus: {{flavor_specification['vcpus']}}
        disk: {{flavor_specification['disk']}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  NovaKeypair.create_and_list_keypairs:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaSecGroup.create_and_list_secgroups:
    -
      args:
        security_group_count: {{nova_security_group_count}}
        rules_per_security_group: {{nova_rules_per_security_group}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServerGroups.create_and_list_server_groups:
    -
      args:
        kwargs:
          policies: ["affinity"]
        all_projects: false
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaAggregates.create_and_update_aggregate:
    -
      args:
        availability_zone: "{{availability_zone}}"
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaSecGroup.create_and_update_secgroups:
    -
      args:
        security_group_count: {{nova_security_group_count}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaFlavors.create_flavor_and_add_tenant_access:
    -
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}
      args:
        ram: {{flavor_specification['ram']}}
        vcpus: {{flavor_specification['vcpus']}}
        disk: {{flavor_specification['disk']}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}



  NovaFlavors.create_flavor_and_set_keys:
    -
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}
      args: {{flavor_specification}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


#  NovaFlavors.create_flavor:
#    -
#      args:
#        ram: {{flavor_specification['ram']}}
#        vcpus: {{flavor_specification['vcpus']}}
#        disk: {{flavor_specification['disk']}}
#      runner:
#        type: "constant"
#        times: {{run_N_times}}
#        concurrency: {{number_of_concurrent_scenarios}}


  NovaAgents.list_agents:
    -
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}


#  NovaAggregates.list_aggregates:
#    -
#      runner:
#        type: "constant"
#        concurrency: {{number_of_concurrent_scenarios}}
#        times: {{run_N_times}}


  NovaHosts.list_and_get_hosts:
    -
      args: {}
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaHypervisors.list_and_get_hypervisors:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaHypervisors.list_and_get_uptime_hypervisors:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaHypervisors.list_and_search_hypervisors:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaAvailabilityZones.list_availability_zones:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}


  NovaFlavors.list_flavors:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaHosts.list_hosts:
    -
      runner:
        type: "constant"
        concurrency: {{number_of_concurrent_scenarios}}
        times: {{run_N_times}}


  NovaHypervisors.list_hypervisors:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  NovaImages.list_images:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.list_servers:
    -
      args:
        detailed: {{nova_detailed_info}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        servers:
          flavor:
              name: "{{flavor_name}}"
          image:
              name: "{{image_name}}"
          servers_per_tenant: {{servers_per_tenant_before_benchmarking}}


  NovaServices.list_services:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}


  NovaServers.pause_and_unpause_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.resize_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        to_flavor:
            name: "{{nova_rebuild_to_flavor_name}}"
        confirm: {{nova_confirm_resize}}
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaServers.resize_shutoff_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        to_flavor:
            name: "{{nova_rebuild_to_flavor_name}}"
        confirm: {{nova_confirm_resize}}
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaServers.shelve_and_unshelve_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}


  NovaHypervisors.statistics_hypervisors:
    -
      args: {}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
      sla:
        failure_rate:
          max: {{sla_failure_rate_max}}


  NovaServers.suspend_and_resume_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        force_delete: {{force_delete}}
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}




  SwiftObjects.create_container_and_object_then_delete_all:
    -
      args:
        objects_per_container: {{swift_objects_per_container}}
        object_size: 102400
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "admin"


  SwiftObjects.create_container_and_object_then_download_object:
    -
      args:
        objects_per_container: {{swift_objects_per_container}}
        object_size: 1024
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "admin"


  SwiftObjects.create_container_and_object_then_list_objects:
    -
      args:
        objects_per_container: {{swift_objects_per_container}}
        object_size: 5120
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "admin"


  SwiftObjects.list_and_download_objects_in_containers:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "admin"
        swift_objects:
          containers_per_tenant: {{swift_containers_per_tenant}}
          objects_per_container: {{swift_objects_per_container}}
          object_size: 10240


  SwiftObjects.list_objects_in_containers:
    -
      runner:
        type: "constant"
        times: {{run_N_times}}
        concurrency: {{number_of_concurrent_scenarios}}
      context:
        users:
          tenants: {{number_of_tenants}}
          users_per_tenant: {{users_per_tenant}}
        roles:
          - "admin"
        swift_objects:
          containers_per_tenant: {{swift_containers_per_tenant}}
          objects_per_container: {{swift_objects_per_container}}
          object_size: 1024




